name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        include:
        - type: Win32
          triplet: x86-windows
        - type: x64
          triplet: x64-windows
          
    runs-on: windows-2019
    
    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Cache
      uses: actions/cache@v2.1.4
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ${{github.workspace}}/build/vcpkg_installed
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys:  ${{ runner.os }}-${{ matrix.triplet }}-

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -A ${{ matrix.type }} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}

    - name: Build
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        include:
        - arch: x86_64
          triplet: x64-osx
        - arch: arm64
          triplet: arm64-osx
          
    runs-on: 	macos-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Cache
      uses: actions/cache@v2.1.4
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ${{github.workspace}}/build/vcpkg_installed
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys:  ${{ runner.os }}-${{ matrix.triplet }}-

    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
    
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
        - path: /
          apt: g++-9
          cc: gcc-9
          cxx: g++-9
          triplet: x64-linux
        - path: /usr/i686-linux-gnu
          apt: g++-i686-linux-gnu
          cc: i686-linux-gnu-gcc
          cxx: i686-linux-gnu-g++
          triplet: x86-linux
        - path: /usr/aarch64-linux-gnu
          apt: g++-aarch64-linux-gnu
          cc: aarch64-linux-gnu-gcc
          cxx: aarch64-linux-gnu-g++
          triplet: arm64-linux
        - path: /usr/arm-linux-gnueabihf
          apt: g++-arm-linux-gnueabihf
          cc: arm-linux-gnueabihf-gcc
          cxx: arm-linux-gnueabihf-g++
          triplet: arm-linux
        
    runs-on: ubuntu-20.04
    
    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Install Cross Compiler
      run: sudo apt-get install ${{ matrix.apt }}
      
    - name: Cache
      uses: actions/cache@v2.1.4
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ${{github.workspace}}/build/vcpkg_installed
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys:  ${{ runner.os }}-${{ matrix.triplet }}-

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -DCMAKE_C_COMPILER=${{ matrix.cc }} -DVCPKG_OVERLAY_TRIPLETS=${{ github.workspce }}/triplets -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_PREFIX_PATH=${{ matrix.path }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
